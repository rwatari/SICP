; Digital Circuit Simulator

;; Inverter
(define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda () (set-signal! output new-value)))))
  (add-action! input invert-input) 'ok)
(define (logical-not s)
  (cond ((= s 0) 1)
        ((= s 1) 0)
        (else (error "Invalid signal" s))))

;; And-gate
(define (and-gate in1 in2 output)
  (define (and-action-procedure)
    (let ((new-value
           (logical-and (get-signal in1) (get-signal in2))))
      (after-delay
       and-gate-delay
       (lambda () (set-signal! output new-value)))))
  (add-action! in1 and-action-procedure)
  (add-action! in2 and-action-procedure)
  'ok)
(define (logical-and s1 s2)
  (cond ((and (= s1 1) (= s2 1)) 1)
        ((and (or (= s1 0) (= s1 1))
              (or (= s2 0) (= s2 1)))
         0)
        (else (error "Invalid signals" s1 s2))))

;; Or-gate
(define (or-gate in1 in2 output)
  (define (or-action-procedure)
    (let ((new-value
           (logical-or (get-signal in1) (get-signal in2))))
      (after-delay
       or-gate-delay
       (lambda () (set-signal! output new-value)))))
  (add-action! in1 or-action-procedure)
  (add-action! in2 or-action-procedure)
  'ok)
(define (logical-or s1 s2)
  (cond ((and (= s1 0) (= s2 0)) 0)
        ((and (or (= s1 0) (= s1 1))
              (or (= s2 0) (= s2 1)))
         1)
        (else (error "Invalid signals" s1 s2))))
          