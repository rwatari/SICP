
(define (get-method object message)
  (object message))
(define (no-method name)
  (list 'no-method name))
(define (no-method? x)
  (if (pair? x)
      (eq? (car x) 'no-method)
      false))
(define (method? x)
  (not (no-method? x)))

(define (ask object message . args)
  (let ((method (get-method object message)))
    (if (method? method)
        (apply method (cons object args))
        (error "NO METHOD" message (cadr method)))))

;
(define (make-speaker)
    (define (self message)
      (cond ((eq? message 'say)
             (lambda (self stuff) (display stuff)))
            (else (no-method message))))
    self)
(define (make-lecturer)
  (let ((speaker (make-speaker)))
    (define (self message)
      (cond ((eq? message 'lecture)
             (lambda (self stuff)
               (ask self 'say stuff)
               (ask self 'say '(you should be taking notes))))
            (else (get-method speaker message))))
    self))
(define (make-arrogant-lecturer)
  (let ((lecturer (make-lecturer)))
    (define (self message)
      (cond ((eq? message 'say)
             (lambda (self stuff)
               (ask lecturer 'say (append '(it is obvious that) stuff))))
            (else (get-method lecturer message))))
    self))

(define Albert (make-arrogant-lecturer))
(ask Albert 'lecture '(the sky is blue))